/**
 * Sistema de Carregamento de Conte√∫do
 * Gerencia o carregamento din√¢mico de conte√∫do para cada aba
 */

class ContentLoader {
    constructor() {
        this.contentCache = new Map();
        this.loadingStates = new Map();
        this.init();
    }

    init() {
        this.bindEvents();
        this.preloadContent();
    }

    bindEvents() {
        // Escuta mudan√ßas de aba para carregar conte√∫do
        document.addEventListener('tabChanged', (e) => {
            this.loadTabContent(e.detail.tabName);
        });
    }

    async loadTabContent(tabName) {
        const container = document.getElementById(`${tabName}-content`);
        if (!container) return;

        // Se j√° est√° carregado, n√£o faz nada
        if (this.isContentLoaded(tabName)) return;

        // Se est√° carregando, aguarda
        if (this.loadingStates.get(tabName)) {
            return this.loadingStates.get(tabName);
        }

        // Mostra loading
        this.showLoading(container);

        // Inicia carregamento
        const loadingPromise = this.fetchContent(tabName);
        this.loadingStates.set(tabName, loadingPromise);

        try {
            const content = await loadingPromise;
            this.renderContent(container, content);
            this.contentCache.set(tabName, content);
        } catch (error) {
            this.showError(container, error);
        } finally {
            this.loadingStates.delete(tabName);
        }
    }

    async fetchContent(tabName) {
        // Simula delay de carregamento
        await this.delay(500);

        switch (tabName) {
            case 'teoria':
                return this.getTeoriaContent();
            case 'exercicios':
                return this.getExerciciosContent();
            case 'solucoes':
                return this.getSolucoesContent();
            default:
                throw new Error(`Conte√∫do n√£o encontrado para: ${tabName}`);
        }
    }

    getTeoriaContent() {
        return `
            <div class="section">
                <h2>üë∂ Exemplo Super B√°sico</h2>
                
                <p>Vamos contar de 1 at√© 3. Simples como respirar:</p>
                
                <div class="code-block">
<span class="comment"># Contando de 1 at√© 3</span>
<span class="function">contador</span> <span class="operator">=</span> <span class="number">1</span>  <span class="comment"># Come√ßamos com 1</span>

<span class="keyword">while</span> <span class="function">contador</span> <span class="operator"><=</span> <span class="number">3</span><span class="operator">:</span>  <span class="comment"># Enquanto contador for menor ou igual a 3</span>
    <span class="builtin">print</span><span class="operator">(</span><span class="function">contador</span><span class="operator">)</span>  <span class="comment"># Mostra o n√∫mero</span>
    <span class="function">contador</span> <span class="operator">+=</span> <span class="number">1</span>  <span class="comment"># Adiciona 1 (SUPER IMPORTANTE!)</span>

<span class="builtin">print</span><span class="operator">(</span><span class="string">"Acabou!"</span><span class="operator">)</span>
                </div>
                
                <div class="output-block">1
2
3
Acabou!</div>
                
                <div class="tip-box">
                    <h4>üí° Por que funciona?</h4>
                    <ol>
                        <li><strong>contador = 1</strong> ‚Üí Condi√ß√£o: 1 <= 3? SIM! ‚Üí Executa</li>
                        <li><strong>contador = 2</strong> ‚Üí Condi√ß√£o: 2 <= 3? SIM! ‚Üí Executa</li>
                        <li><strong>contador = 3</strong> ‚Üí Condi√ß√£o: 3 <= 3? SIM! ‚Üí Executa</li>
                        <li><strong>contador = 4</strong> ‚Üí Condi√ß√£o: 4 <= 3? N√ÉO! ‚Üí Para</li>
                    </ol>
                </div>
            </div>

            <div class="section">
                <h2>‚ö†Ô∏è Cuidado com o Loop Infinito!</h2>
                
                <div class="warning-box">
                    <h4>üö® PERIGO: Loop Infinito</h4>
                    <p>Se voc√™ esquecer de modificar a vari√°vel da condi√ß√£o, seu programa vai rodar para sempre!</p>
                </div>
                
                <div class="code-block">
<span class="comment"># ‚ùå C√ìDIGO PERIGOSO - N√ÉO RODE!</span>
<span class="function">contador</span> <span class="operator">=</span> <span class="number">1</span>

<span class="keyword">while</span> <span class="function">contador</span> <span class="operator"><=</span> <span class="number">3</span><span class="operator">:</span>
    <span class="builtin">print</span><span class="operator">(</span><span class="function">contador</span><span class="operator">)</span>
    <span class="comment"># Esqueceu do contador += 1 ‚Üí LOOP INFINITO!</span>
    <span class="comment"># Vai imprimir 1, 1, 1, 1... para sempre!</span>
                </div>
                
                <div class="tip-box">
                    <h4>üõ°Ô∏è Como se proteger?</h4>
                    <p>Sempre se pergunte: <em>"O que vai fazer minha condi√ß√£o virar False?"</em></p>
                    <p>Se n√£o souber a resposta, voc√™ provavelmente tem um loop infinito!</p>
                </div>
            </div>
        `;
    }

    getExerciciosContent() {
        return `
            <div class="section">
                <h2>üí™ Exerc√≠cios Progressivos</h2>
                <p class="intro-text">
                    Exerc√≠cios cuidadosamente selecionados do b√°sico ao expert, cobrindo desde problemas simples 
                    at√© desafios que voc√™ pode encontrar em competi√ß√µes e entrevistas t√©cnicas!
                </p>
                
                <div class="exercise-card">
                    <div class="difficulty-badge easy">F√ÅCIL</div>
                    <h3>üçé Exerc√≠cio 1: Contador de Ma√ß√£s</h3>
                    <p><strong>Contexto:</strong> Voc√™ trabalha em um pomar e precisa contar quantas ma√ß√£s colheu.</p>
                    <p><strong>Problema:</strong> Crie um programa que conte de 1 at√© 10 e imprima "Ma√ß√£ n√∫mero X" para cada n√∫mero.</p>
                    <p><strong>Exemplo de sa√≠da:</strong></p>
                    <div class="output-block">Ma√ß√£ n√∫mero 1
Ma√ß√£ n√∫mero 2
Ma√ß√£ n√∫mero 3
...
Ma√ß√£ n√∫mero 10
Total: 10 ma√ß√£s coletadas!</div>
                </div>
                
                <div class="exercise-card">
                    <div class="difficulty-badge medium">M√âDIO</div>
                    <h3>üí∞ Exerc√≠cio 2: Simulador de Poupan√ßa</h3>
                    <p><strong>Contexto:</strong> Voc√™ quer saber quando sua poupan√ßa vai atingir uma meta.</p>
                    <p><strong>Problema:</strong> Comece com R$ 1000,00. A cada m√™s, adicione R$ 150,00 e ganhe 0,5% de juros sobre o total. Calcule em quantos meses voc√™ ter√° pelo menos R$ 2000,00.</p>
                    <p><strong>Detalhes:</strong></p>
                    <ul>
                        <li>Saldo inicial: R$ 1000,00</li>
                        <li>Dep√≥sito mensal: R$ 150,00</li>
                        <li>Juros mensais: 0,5% sobre o saldo total</li>
                        <li>Meta: R$ 2000,00</li>
                    </ul>
                </div>
            </div>
        `;
    }

    getSolucoesContent() {
        return `
            <div class="section">
                <h2>‚úÖ Solu√ß√µes Detalhadas</h2>
                <p class="intro-text">
                    Cada solu√ß√£o vem com explica√ß√£o passo a passo e pontos importantes destacados!
                </p>
                
                <div class="exercise-card">
                    <h3>üçé Solu√ß√£o 1: Contador de Ma√ß√£s</h3>
                    
                    <div class="code-block">
<span class="comment"># Contador de Ma√ß√£s - Solu√ß√£o</span>

<span class="function">contador</span> <span class="operator">=</span> <span class="number">1</span>  <span class="comment"># Inicializa o contador</span>

<span class="keyword">while</span> <span class="function">contador</span> <span class="operator"><=</span> <span class="number">10</span><span class="operator">:</span>  <span class="comment"># Enquanto contador for menor ou igual a 10</span>
    <span class="builtin">print</span><span class="operator">(</span><span class="string">f"Ma√ß√£ n√∫mero {contador}"</span><span class="operator">)</span>  <span class="comment"># Mostra a ma√ß√£ atual</span>
    <span class="function">contador</span> <span class="operator">+=</span> <span class="number">1</span>  <span class="comment"># Incrementa o contador</span>

<span class="builtin">print</span><span class="operator">(</span><span class="string">f"Total: {contador-1} ma√ß√£s coletadas!"</span><span class="operator">)</span>  <span class="comment"># Total final</span>
                    </div>
                    
                    <div class="tip-box">
                        <h4>üìã Pontos importantes:</h4>
                        <ol>
                            <li><strong>Inicializa√ß√£o:</strong> Come√ßamos com contador = 1</li>
                            <li><strong>Condi√ß√£o:</strong> while contador <= 10 (vai de 1 at√© 10)</li>
                            <li><strong>Incremento:</strong> contador += 1 evita loop infinito</li>
                            <li><strong>Total:</strong> contador-1 porque ap√≥s o √∫ltimo loop, contador vira 11</li>
                        </ol>
                    </div>
                </div>
            </div>
        `;
    }

    showLoading(container) {
        container.innerHTML = `
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p>Carregando conte√∫do...</p>
            </div>
        `;
    }

    showError(container, error) {
        container.innerHTML = `
            <div class="error-container">
                <h3>‚ùå Erro ao carregar conte√∫do</h3>
                <p>Ocorreu um erro: ${error.message}</p>
                <button onclick="location.reload()" class="retry-btn">Tentar novamente</button>
            </div>
        `;
    }

    renderContent(container, content) {
        container.innerHTML = content;
        
        // Trigger evento para notificar que conte√∫do foi carregado
        const event = new CustomEvent('contentLoaded', {
            detail: { container }
        });
        document.dispatchEvent(event);
    }

    isContentLoaded(tabName) {
        return this.contentCache.has(tabName);
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async preloadContent() {
        // Precarrega conte√∫do da teoria (aba inicial)
        await this.loadTabContent('teoria');
    }

    // M√©todo p√∫blico para limpar cache
    clearCache() {
        this.contentCache.clear();
    }

    // M√©todo p√∫blico para recarregar conte√∫do
    async reloadContent(tabName) {
        this.contentCache.delete(tabName);
        await this.loadTabContent(tabName);
    }
}

// Inicializa√ß√£o quando DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
    window.contentLoader = new ContentLoader();
});

// Exporta para uso em outros m√≥dulos
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ContentLoader;
}